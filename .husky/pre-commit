#!/usr/bin/env sh

# Generate schema before commit
echo "🔧 Generating schema..."
pnpm gen:schema

# Check for env files in staged commits (except .env.example)
echo "🔍 Checking for environment files in staged commits..."
staged_env_files=$(git diff --cached --name-only | grep -E '^\.env(\.[^.]*)?$' | grep -v '\.env\.example$' || true)

if [ ! -z "$staged_env_files" ]; then
    echo "❌ Environment files found in staged commits:"
    echo "$staged_env_files"
    echo ""
    echo "🧹 Removing environment files from staged commits..."
    echo "$staged_env_files" | xargs git reset HEAD --
    echo "✅ Environment files removed from staging area."
    echo ""
    echo "⚠️  Note: .env files should not be committed to version control."
    echo "   Only .env.example should be committed as a template."
fi

# Get staged files that can be formatted (exclude ignored directories)
echo "🎨 Formatting staged files..."
staged_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx|json|md)$' | grep -v -E '^(\.next/|\.vscode/|dist/|node_modules/|build/|coverage/|out/|\.cache/|\.git/)' || true)

if [ ! -z "$staged_files" ]; then
    # Additional filter for files that exist
    valid_files=""
    for file in $staged_files; do
        if [ -f "$file" ]; then
            valid_files="$valid_files $file"
        fi
    done

    if [ ! -z "$valid_files" ]; then
        echo "Formatting files:$valid_files"
        echo $valid_files | xargs pnpm prettier --write

        # Re-stage the formatted files
        echo $valid_files | xargs git add

        echo "✅ Formatted and re-staged files."
    else
        echo "ℹ️  No valid files to format."
    fi
else
    echo "ℹ️  No staged files to format."
fi

# If you have linting, you can add it here
# echo "🔍 Running linting..."
# pnpm lint

echo "✅ Pre-commit checks passed!"

echo "✅ Pre-commit checks passed!"
